plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
/*    implementation 'javax.servlet:jstl'*/

    // TILES
    // https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils
    implementation 'commons-beanutils:commons-beanutils:1.9.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation("org.junit.vintage:junit-vintage-engine") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //json
    implementation 'org.json:json:20220320'

    //mybatis
    implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2"
    implementation 'org.mybatis:mybatis-spring:2.0.7'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // https://mvnrepository.com/artifact/com.github.jai-imageio/jai-imageio-core
    implementation group: 'com.github.jai-imageio', name: 'jai-imageio-core', version: '1.3.0'

    // https://mvnrepository.com/artifact/com.github.jai-imageio/jai-imageio-core
    implementation 'com.github.jai-imageio:jai-imageio-core:1.3.0'
    implementation 'commons-io:commons-io:2.10.0'


    implementation 'com.amazonaws:aws-java-sdk-bom:1.12.220'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.220'

    implementation group: 'org.apache.poi', name: 'poi', version: '5.1.0' // xls
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.1.0' // xlsx
    implementation group: 'sax', name: 'sax', version: '2.0.1' // 엑셀 파싱용

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

}

tasks.named('test') {
    useJUnitPlatform()
}

def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
    main {
        resources { srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install' }
    else {
        commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
    }
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task copyReactBuildFiles(type: Copy) {
    dependsOn "buildReact"
    from "$frontendDir/build"
    into "$projectDir/src/main/resources/static"
}
